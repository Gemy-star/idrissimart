# .github/workflows/django-ci.yml
# Automated testing and linting for Django project

name: Django CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff bandit[toml] djlint

    - name: Run Ruff linter
      run: |
        ruff check .
      continue-on-error: false

    - name: Run Ruff formatter check
      run: |
        ruff format --check .
      continue-on-error: false

    - name: Run Bandit security scan
      run: |
        bandit -r . -c pyproject.toml -f json -o bandit-report.json
        bandit -r . -c pyproject.toml
      continue-on-error: false

    - name: Run DjLint (Django templates)
      run: |
        djlint templates/ --check
      continue-on-error: true

    - name: Upload Bandit report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit-report.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create .env file
      run: |
        echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
        echo "DJANGO_DEBUG=True" >> .env
        echo "DB_NAME=test_db" >> .env
        echo "DB_USER=test_user" >> .env
        echo "DB_PASSWORD=test_pass" >> .env

    - name: Run Django system check
      run: |
        python manage.py check

    - name: Run Django migrations check
      run: |
        python manage.py makemigrations --check --dry-run

    - name: Run tests
      run: |
        python manage.py test
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

    - name: Generate coverage report
      run: |
        pip install coverage
        coverage run --source='.' manage.py test
        coverage report
        coverage html
      continue-on-error: true

    - name: Upload coverage report
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install safety
      run: pip install safety

    - name: Check for known vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true

    - name: Upload safety report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: safety-vulnerability-report
        path: safety-report.json

  build:
    name: Build & Deploy Check
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create .env file
      run: |
        echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
        echo "DJANGO_DEBUG=False" >> .env
        echo "DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1" >> .env

    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput

    - name: Check deployment readiness
      run: |
        python manage.py check --deploy

    - name: Build success notification
      if: success()
      run: |
        echo "âœ… Build successful and ready for deployment!"

# Add repository secrets:
# Settings > Secrets and variables > Actions > New repository secret
# - DJANGO_SECRET_KEY: Your production secret key
