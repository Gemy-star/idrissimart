name: Django CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Ruff Linter
        run: ruff check .
        continue-on-error: false

      - name: Run Ruff Formatter Check
        run: ruff format --check .
        continue-on-error: false

      - name: Run Bandit Security Scan
        run: |
          bandit -r . -c pyproject.toml -f json -o bandit-report.json
          bandit -r . -c pyproject.toml
        continue-on-error: false

      - name: Run DjLint (Django templates)
        run: djlint templates/ --check
        continue-on-error: true

      - name: Upload Bandit Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Create .env file
        run: |
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DJANGO_DEBUG=True" >> .env
          echo "DB_NAME=test_db" >> .env
          echo "DB_USER=test_user" >> .env
          echo "DB_PASSWORD=test_pass" >> .env

      - name: Run Django System Check
        run: python manage.py check

      - name: Run Django Migration Check
        run: python manage.py makemigrations --check --dry-run

      - name: Run Tests
        run: python manage.py test
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

      - name: Generate Coverage Report
        run: |
          coverage run --source='.' manage.py test
          coverage report
          coverage html
        continue-on-error: true

      - name: Upload Coverage Report
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check for Known Vulnerabilities
        run: |
          pip install safety
          safety check --json --output safety-report.json
          safety check
        continue-on-error: true

      - name: Upload Safety Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-vulnerability-report
          path: safety-report.json

  build:
    name: Build & Deploy Check
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file
        run: |
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DJANGO_DEBUG=False" >> .env
          echo "DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1" >> .env

      - name: Collect Static Files
        run: python manage.py collectstatic --noinput

      - name: Check Deployment Readiness
        run: python manage.py check --deploy

      - name: Build Success Notification
        if: success()
        run: echo "âœ… Build successful and ready for deployment!"
